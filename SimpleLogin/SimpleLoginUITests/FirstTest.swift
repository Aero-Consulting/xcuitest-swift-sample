//
//  FirstTest.swift
//  SimpleLoginUITests
//
//  Created by Ilya Smotrov on 23.03.2023.
//

import XCTest

final class FirstTest: XCTestCase {

    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.

        // In UI tests it is usually best to stop immediately when a failure occurs.
        continueAfterFailure = false

        // In UI tests it‚Äôs important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }
    
    func scrollToElement(element: XCUIElement, app: XCUIApplication) {
        while !(element.isHittable) {
            app.swipeUp()
        }
        XCTAssertTrue(element.isHittable)
    }
    
    func confirmWelcomeScreen(app: XCUIApplication) {
        let gotItButton = app.buttons["Got it üëç"];
        scrollToElement(element: gotItButton, app: app)
        gotItButton.tap()
    }
    
    func testFirst() throws {
        // UI tests must launch the application that they test.
        
        let app = XCUIApplication()
        app.launch()
        
        
        /*
         1. –í–≤–µ—Å—Ç–∏ email alexsimplestar@gmail.com
         2. –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å 1234Qwer!
         3. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É SignIn
        */
        let emailField = app.textFields["Email"]
        emailField.tap()
                                        
        let clearEmailFieldButton = app.buttons["–ó–∞–∫—Ä—ã—Ç—å"]
        clearEmailFieldButton.tap()
        emailField.typeText("alexsimplestar@gmail.com")

        let passwordField = app.secureTextFields["Password"]
        passwordField.tap()
        passwordField.typeText("1234Qwer!")
        
        let loginButton = app.buttons["Log in"]
        loginButton.tap()
    
        confirmWelcomeScreen(app: app)
        
        /*
         4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Aliases —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞
         5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
         6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ All –≤—ã–±—Ä–∞–Ω–∞
         7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ Active –ù–ï –≤—ã–±—Ä–∞–Ω–∞
         8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ Inactive –ù–ï –≤—ã–±—Ä–∞–Ω–∞
         */
        
        let navBar = app.navigationBars["_TtGC7SwiftUI19UIHosting"];
        let alias = app.collectionViews.children(matching: .cell).element(boundBy: 0)
        
        
        XCTAssertTrue(alias.exists, "–ê–ª–∏–∞—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç–µ—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ All")

        XCTAssertTrue(navBar.buttons["All"].isSelected)
        XCTAssertFalse(navBar.buttons["Active"].isSelected)
        XCTAssertFalse(navBar.buttons["Inactive"].isSelected)

        /*
         9. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–¥–∫—É Active
         10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ All –ù–ï –≤—ã–±—Ä–∞–Ω–∞
         11. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ A—Åtive –≤—ã–±—Ä–∞–Ω–∞
         12. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞  Inactive –ù–ï –≤—ã–±—Ä–∞–Ω–∞
         13. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
         */

        navBar.buttons["Active"].tap()

        XCTAssertFalse(navBar.buttons["All"].isSelected)
        XCTAssertTrue(navBar.buttons["Active"].isSelected)
        XCTAssertFalse(navBar.buttons["Inactive"].isSelected)

        XCTAssertTrue(alias.exists, "–ê–ª–∏–∞—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç–µ—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ Active")

        /*
         14. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–¥–∫—É Inactive
         15. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ All –ù–ï –≤—ã–±—Ä–∞–Ω–∞
         16. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ Active –ù–ï –≤—ã–±—Ä–∞–Ω–∞
         17. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞  Inactive –≤—ã–±—Ä–∞–Ω–∞
         18. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è

         */

        navBar.buttons["Inactive"].tap()

        XCTAssertFalse(navBar.buttons["All"].isSelected)
        XCTAssertFalse(navBar.buttons["Active"].isSelected)
        XCTAssertTrue(navBar.buttons["Inactive"].isSelected)

        XCTAssertFalse(alias.exists, "–ê–ª–∏–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞—Ç–µ—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ Inactive")

        /*
         19. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–¥–∫—É All
         20. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ All –≤—ã–±—Ä–∞–Ω–∞
         21. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ Active –ù–ï –≤—ã–±—Ä–∞–Ω–∞
         22. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–∫–∞ Inactive –ù–ï –≤—ã–±—Ä–∞–Ω–∞
         23. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ alias –≤–∫–ª—é—á–µ–Ω
         24. –ù–∞–∂–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ alias
         25. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ alias –≤—ã–∫–ª—é—á–µ–Ω

         */

        navBar.buttons["All"].tap()

        XCTAssertTrue(navBar.buttons["All"].isSelected)
        XCTAssertFalse(navBar.buttons["Active"].isSelected)
        XCTAssertFalse(navBar.buttons["Inactive"].isSelected)

        XCTAssertTrue(alias.buttons["Active"].images["–í—ã–±—Ä–∞–Ω–æ"].exists, "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Active –Ω–µ –≤—ã–±—Ä–∞–Ω")

        alias.buttons["Active"].tap()
        XCTAssertFalse(alias.buttons["Active"].images["–í—ã–±—Ä–∞–Ω–æ"].exists, "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Active –≤—ã–±—Ä–∞–Ω")

        /*
         26. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–¥–∫—É Active
         27. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
         28. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–¥–∫—É Inactive
         29. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
         30. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–¥–∫—É All
         31. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è

         */

        navBar.buttons["Active"].tap()
        XCTAssertFalse(alias.exists, "–ê–ª–∏–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ Active")
        
        navBar.buttons["Inactive"].tap()
        XCTAssertTrue(alias.exists, "–ê–ª–∏–∞—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ Inactive")
        
        navBar.buttons["All"].tap()
        XCTAssertTrue(alias.exists, "–ê–ª–∏–∞—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ All")


        /*

         32. –ù–∞–∂–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ alias
         33. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ alias –≤–∫–ª—é—á–µ–Ω
         34. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–¥–∫—É Active
         35. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
         36. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–¥–∫—É Inactive
         37. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
         38. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–ª–∞–¥–∫—É All
         39. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
         */


        alias.buttons["Active"].tap()
        XCTAssertTrue(alias.buttons["Active"].images["–í—ã–±—Ä–∞–Ω–æ"].exists)

        navBar.buttons["Active"].tap()
        XCTAssertTrue(alias.exists, "–ê–ª–∏–∞—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ Active")

        navBar.buttons["Inactive"].tap()
        XCTAssertFalse(alias.exists, "–ê–ª–∏–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ Inactive")

        navBar.buttons["All"].tap()
        XCTAssertTrue(alias.exists, "–ê–ª–∏–∞—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ All")


        /*
         40. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫–∫–∞—É–Ω—Ç–∞
         41. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞
         42. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É upgrade
         43. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞  upgrade –æ—Ç–∫—Ä—ã—Ç–∞
         44. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
         45. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞
         */
        
        app.staticTexts["My account"].tap()
        XCTAssertTrue(app.navigationBars["My Account"].waitForExistence(timeout: 30))
        
        let upgradeButton = app.navigationBars["My Account"].buttons["Upgrade"]
        XCTAssertTrue(upgradeButton.isHittable)
        upgradeButton.tap()
        
        XCTAssertTrue(app
            .navigationBars["Upgrade for more features"]
            .staticTexts["Upgrade for more features"]
            .exists
        )
        
        app.buttons["My Account"].tap()
        XCTAssertTrue(app.navigationBars["My Account"].waitForExistence(timeout: 30))
        

        /*
         46. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Aliases
         47. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Alises –æ—Ç–∫—Ä—ã—Ç–∞
         48. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ alias –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
         49. –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
         50. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞*/
        
        app.staticTexts["Aliases"].tap()
        XCTAssertTrue(alias.exists, "–ê–ª–∏–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ Aliases")
        
        app.staticTexts["My account"].tap()
        XCTAssertTrue(app.navigationBars["My Account"].waitForExistence(timeout: 30))

        let logOutButton = app.buttons["Log out"];
        scrollToElement(element: logOutButton, app: app)
        logOutButton.tap()

        app.alerts.buttons["Yes, log me out"].tap()
        XCTAssertTrue(app.buttons["Log in"].waitForExistence(timeout: 30), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω –∏ –≤–∏–¥–∏—Ç —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞")
        sleep(30)
    }

    func testLaunchPerformance() throws {
        if #available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 7.0, *) {
            // This measures how long it takes to launch your application.
            measure(metrics: [XCTApplicationLaunchMetric()]) {
                XCUIApplication().launch()
            }
        }
    }
}
